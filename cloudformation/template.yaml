AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template to Generate Translations
Parameters:

  Environments:
    Type: String
    AllowedValues:
      - stage
      - production

  WebSiteBucket:
    Type: String    

  ProjectName:
    Type: String

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id

  DomainName:
    Type: String

  TranslateSite:
    Type: String
    AllowedValues:
      - True
      - False
    Default: True

Conditions:
  CreateProdResource: !Equals [ !Ref Environments, "production" ]

Mappings: 
  RegionMap: 
    eu-west-1: 
      S3HostedZoneId: 'Z1BKCTXD74EZPE'
      S3DNSName: 's3-website-eu-west-1.amazonaws.com.'

Resources:

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateProdResource
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          DNSName: !FindInMap [RegionMap, !Ref 'AWS::Region', S3DNSName]
          HostedZoneId: !FindInMap [RegionMap, !Ref 'AWS::Region', S3HostedZoneId]
          EvaluateTargetHealth: false

  Bs4Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${Environments}-${ProjectName}-bs4-python36'
      Content:
        S3Bucket: !Ref WebSiteBucket
        S3Key: layers/bs4-layer/bs4-python36-layer.zip
      Description: Beautiful Soup 4 Layer for Python 3.6
      CompatibleRuntimes:
        - python3.6

  S3NotificationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName : !Sub '${Environments}-${ProjectName}-translate'
      Code:
        ZipFile: |
              from collections import namedtuple
              from bs4 import BeautifulSoup
              from bs4.element import Comment
              import boto3
              import json
              import os

              exclude_prefix = ('cv', 'it')
              tr = boto3.client('translate')
              s3 = boto3.client('s3')

              def s3_parse_event(event):
                bucket = event['Records'][0]['s3']['bucket']['name']
                key = event['Records'][0]['s3']['object']['key']
                Page = namedtuple('Page', 'bucket key')
                return Page(bucket, key)
                
              def translate(text):
                response = tr.translate_text(Text=text, SourceLanguageCode='en', TargetLanguageCode='it', TerminologyNames=['publii'])
                if text[0] == ' ':
                  response['TranslatedText'] = ' ' + response['TranslatedText']
                if text[-1] == ' ':
                  response['TranslatedText'] = response['TranslatedText'] + ' '

                return response['TranslatedText']
                  
              def lambda_handler(event, context):
                page = s3_parse_event(event)

                if page.key.startswith(exclude_prefix):
                  print(f'Skip {page.key}')
                  return 
                
                path_file = f'/tmp/{page.key}'
                os.makedirs(os.path.dirname(path_file), exist_ok=True)
                with open(path_file, 'wb') as f:
                  s3.download_fileobj( page.bucket, page.key, f)
                
                with open(path_file, 'rb') as file:
                  soup = BeautifulSoup(file.read(), 'html.parser')
                main = soup.find('main')
                
                for text in main.findAll(text=True):
                  translated_text = translate(text)
                  text.replaceWith(translated_text)

                with open(path_file, "w") as file:
                  file.write(str(soup))
                
                extra_args = {
                  'ACL' : 'public-read',
                  'CacheControl': 'no-cache, no-store',
                  'ContentType': 'text/html'
                }

                with open(path_file, 'rb') as data:
                  s3.upload_fileobj(data, page.bucket, f'it/{page.key}', ExtraArgs=extra_args)
                  
                print(f'Translate {page.key}, {page.bucket}')

      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.6
      Timeout: 80
      Layers:
        - Ref: Bs4Layer

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt S3NotificationLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${WebSiteBucket}'

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Environments}-${ProjectName}-lambda-translate-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${WebSiteBucket}'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:GetObjectAcl'
                  - 's3:PutBucketAcl'
                Resource: 
                  - !Sub 'arn:aws:s3:::${WebSiteBucket}'
                  - !Sub 'arn:aws:s3:::${WebSiteBucket}/*'           
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'translate:TranslateText'
                Resource: '*'

  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName : !Sub '${Environments}-${ProjectName}-triggher'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |

            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILURE'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ],
                          'Filter': {
                            'Key': {
                                'FilterRules': [
                                    {
                                        'Name': 'suffix',
                                        'Value': 'html'
                                    },
                                ]
                            }
                        }
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50


  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt S3NotificationLambdaFunction.Arn
      Bucket: !Ref WebSiteBucket


